length(y)
nxt()
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names <- c("foo","bar","norf")
names(vect2) <- c("foo","bar","norf")
indentical(vect,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
play()
vect[c("foo","bar")]
vect
nxt()
my_vector[1:20]
my_vector <- [1:20]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 !=7
NOT 5 == 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE| c(TRUE,FALSE,FALSE)
TRUE | | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints>7))
which(ints>7)
any(ints==0)
any(ints<0)
all(ints>0)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
View(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
play()
sapply(flag_colors,mean*100)
nxt()
flag_shapes <- flags[19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flags_shape,range)
shape_mat <- sapply(flag_shape,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
View(plants)
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.siza(plants)
object.size(plants)
names(plants)
play()
viewinfo()
nxt()
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size-1,prob-0.7)
flips2 <- rbinom(100,size=1,prob-0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
play()
rnorm(100)
nxt()
rnorm(100,sd=20)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,lambda=10)
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sts.Date()
d1 <- Sys.Date()
clas(d1)
class(d1)
unclass(d1)
d1
d2 <- as.Date(""1969-01-01)
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d,%Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
ckass(t4)
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units="days")
data(cars)
?cars
head(caras)
head(car]s)
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=speed,y=dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist,xlab=Speed)
plot(x=cars$speed,y=cars$dist,xlab=speed)
plot(x=cars$speed,y=cars$dist,title(xlab=speed)
plot(x=cars$speed,y=cars$dist,title(xlab=speed)
plot(x=cars$speed,y=cars$dist,title(xlab=speed))
plot(x=cars$speed,y=cars$dist,title(xlab=cars$speed))
Type plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(main="My Plot")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim=c(10,15))
plot(cars, pch = 2)
data(mtcars)
play()
summary(mtcars)
nxt()
?boxplot
boxplot(formula = mpg ~cyl)
boxplot(formula = mpg ~ cyl)
boxplot(data=mtcars, formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install_from_swirl("Data_Analysis")
install_from_swirl("Getting_and_Cleaning_Data")
install_from_swirl("Regression_Models")
swirl()
bye()
add2 <- function(x, y) {
x + y
}
add2(3,5)
above <- function(x,n) {
use <- x >n
x[use]
}
above(x,13)
above(x,12)
x <- 1:25
above(x,12)
x <- 1:20
above(x,12)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[1] <- mean(y[, 1])
}
means
}
columnmean(plants)
columnmean(cars)
columnmean(my_data)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(my_data)
columnmean(cars)
columnmean(cars, FALSE)
q()
y
y
ls
?source
source(hw1_data.csv)
list.files
list.files
list.files()
mydatatest = read.csv("hw1_data.csv")
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(mydatatest)
formals(columnmean)
sample(1:6,20, replace = TRUE)
cube <- function(x, n) {
x^3
}
cube(3)
cube <- function(x, n) {
x^3
}
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 6
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z <- 10
f(3)
f(4)
f(5)
f(15)
y <- 5
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 2
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 2
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
args(h)
h(5)
h(5,3,4)
h(5,3)
h(5,3,3,4,4)
h(5,3,3)
?parent.frame
search()
cube <- function(x, n) {
x^3
}
cube(3)
setwd("D:/Arquivos/Documents/Cursos Online/Data Science/ds/datasciencecoursera/R Programming/W2/program assignament1/trainee/diet_data")
getwd()
list.files()
andy <- read.csv("Andy.csv")
View(andy)
head(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
andy[1,"Weight"]
andy[30,"Weight"]
andy[wich(andy$Day == 30), "Weight"]
andy[which(andy$Day == 30), "Weight"]
andy_start <- andy[1,"Weight"]
andy_start
andy_end <- andy[20,"weight"]
andy_end
andy_end <- andy[30,"weight"]
andy_end
andy_end <- andy[30,"Weight"]
andy_end
andy_loss <- andy_end - andy_start
andy_loss
andy_loss <- andy_start - andy_end
list.files("")
list.files("*")
list.files
list.files()
files <- list.files()
files
head(read.csv(files[3]))
andy_david <- rbind(andy, read.csv(files[2]))
head(andy_david)
tail(andy_david)
alldata <- rbind(read.csv(files[1:4]))
alldata <- rbind(andy, read.csv(files[2:4]))
alldata <- rbind(andy, read.csv(files[2:4]))
alldata <- rbind(andy, read.csv(files[2:5]))
alldata <- rbind(andy, read.csv(files[2,3]))
alldata <- rbind(andy, read.csv(files[3]))
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
clas(day_25)
class(day_25)
for (i in 1:5) {}
alldata <- data.frame()
# Then make a loop to rbind all the files
for (i in 1:5) {
alldata <- rbind(alldata, read.csv(files[i])
}
str(alldata)
for (i in 1:5) {
alldata <- rbind(alldata, read.csv(files[i]))
}
str(alldata)
median(alldata$Weight)
View(alldata)
View(alldata)
median(alldata$Weight, na.rm=TRUE)
alldata_day30 <- alldata[wich(alldata[,"Day"] == 30),]
alldata_day30 <- alldata[which(alldata[,"Day"] == 30),]
head(alldata_day30)
median(alldata_day30$Weight)
weightmedian <- function(day)  {
files_list <- list.files()   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian(30)
weightmedian(day = 30)
weightmedian(30)
files_list
weightmedian <- function(day)  {
files_list <- list.files()   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian(30)
files_list <- list.files()
files_list
weightmedian <- function(day)  {
files_list <- list.files()   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian(30)
summary(files)
tmp <- vector(mode = "list", length = length(files))
tmp
?seq_along
for (i in seq_along(files)) {
tmp[[i]] <- read.csv(files[[i]])
}
str(tmp)
str(tmp[[1]])
head(tmp[[1]][,"Day"])
output <- do.call(rbind, tmp)
str(output)
median(output$weight)
median(output$weight, na.rm=TRUE)
median(output$Weight, na.rm=TRUE)
median(,output$Weight, na.rm=TRUE)
